<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>绕过 UAC on Bad Wichell</title>
    <link>https://example.org/tags/%E7%BB%95%E8%BF%87-uac/</link>
    <description>Recent content in 绕过 UAC on Bad Wichell</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>The MIT License (MIT) Copyright © 2020 Jordan GAZEAU</copyright>
    <lastBuildDate>Tue, 02 Apr 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://example.org/tags/%E7%BB%95%E8%BF%87-uac/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>靠山吃山</title>
      <link>https://example.org/attack/tryhackme/%E9%9D%A0%E5%B1%B1%E5%90%83%E5%B1%B1/</link>
      <pubDate>Tue, 02 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/attack/tryhackme/%E9%9D%A0%E5%B1%B1%E5%90%83%E5%B1%B1/</guid>
      <description>房间名称 https://tryhackme.com/r/room/monitoringevasion 描述 靠山吃山 难度 中等 作者 BadWiChell 任务一# 介绍# Living Off the Land 是红队社区的一个热门术语。这个名字取自现实生活，靠吃土地上可用的食物为生。同样，攻击者和恶意软件创建者会利用目标计算机的内置工具和实用程序。2013 年，DerbyCon3 上引入了“Living Off the Land”一词，此后在红队社区中获得了更多的关注，成为一种常用和流行的技术。&#xA;这些内置工具在目标系统或网络功能中执行各种常规活动;但是，它们越来越多地被使用和滥用，例如，使用 CertUtil 工具将恶意文件下载到目标计算机中。&#xA;主要思想是使用 Microsoft 签名的程序、脚本和库来融入和规避防御性控制。红队成员在对目标执行交战活动时不希望被发现，因此使用这些工具可以更安全地保持隐身。&#xA;以下是生活在陆地上所包含的一些类别：&#xA;识别 文件操作 任意代码执行 横向移动 安全产品旁路 学习目标&#xA;了解红队参与的“生活在土地上”一词。 了解 LOLBAS 项目及其使用方法。 了解并应用红队参与中使用的技术。 会议室先决条件&#xA;一般黑客技术的基本知识。 完成 Jr. 渗透测试器学习路径。 TryHackMe Red Team 初始访问模块. 任务二# windows 内部系统# Windows Sysinternals 是一组工具和高级系统实用工具，旨在帮助 IT 专业人员在各种高级主题中管理、疑难解答和诊断 Windows 操作系统。&#xA;Sysinternals 套件分为多个类别，包括：&#xA;磁盘管理 流程管理 网络工具 系统信息 安全工具 为了使用 Windows Sysinternals 工具，我们需要接受这些工具的 Microsoft 许可协议。我们可以通过在命令提示符下传递 -accepteula 参数或在工具执行期间通过 GUI 来做到这一点。</description>
    </item>
    <item>
      <title>Runtime Detection Evasion</title>
      <link>https://example.org/attack/tryhackme/runtime-detection-evasion/</link>
      <pubDate>Tue, 26 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/attack/tryhackme/runtime-detection-evasion/</guid>
      <description>房间信息# 房间名称 https://tryhackme.com/r/room/runtimedetectionevasion 描述 运行时检测规避 难度 Hard 作者 BadWiChell 任务一# 介绍# 随着 PowerShell &amp;lt;3 的发布，蓝队 Microsoft 发布了 AMSI（反恶意软件扫描接口），这是一种运行时监控解决方案，旨在阻止和监控持续的威胁。&#xA;学习目标&#xA;了解运行时检测的目的及其检测方式。 学习并应用绕过 AMSI 的技术。 了解常见的缓解措施和潜在的技术替代方案。 在执行恶意代码时，运行时检测措施可能会导致许多麻烦和障碍。幸运的是，作为攻击者，我们可以滥用和利用多种技术和方法来绕过常见的运行时检测解决方案。&#xA;任务二# 在执行代码或应用程序时，无论解释器如何，它几乎总是会流经运行时。这在使用 Windows API 调用和与 .NET 交互时最常见。CLR（公共语言运行时）和 DLR（动态语言运行时）是 .NET 的运行时，是使用 Windows 系统时最常遇到的运行时。在此任务中，我们不会讨论运行时的细节;相反，我们将讨论如何监控它们并检测恶意代码。&#xA;运行时检测度量将在运行时执行之前扫描代码，并确定它是否是恶意的。根据检测措施及其背后的技术，此检测可能基于字符串签名、启发式或行为。如果代码被怀疑是恶意的，它将被分配一个值，如果在指定的范围内，它将停止执行，并可能隔离或删除文件/代码。&#xA;运行时检测措施与标准防病毒软件不同，因为它们将直接从内存和运行时进行扫描。同时，防病毒产品还可以利用这些运行时检测来更深入地了解源自代码的调用和钩子。在某些情况下，防病毒产品可能会使用运行时检测流/源作为其启发式方法的一部分。&#xA;任务三# AMSI（反恶意软件扫描接口）是一项 PowerShell 安全功能，允许任何应用程序或服务直接集成到反恶意软件产品中。Defender 检测 AMSI 以在 .NET 运行时内执行之前扫描有效负载和脚本。来自Microsoft：“Windows 反恶意软件扫描接口 （AMSI） 是一种通用接口标准，它允许您的应用程序和服务与计算机上存在的任何反恶意软件产品集成。AMSI 为您的最终用户及其数据、应用程序和工作负载提供增强的恶意软件保护。有关 AMSI 的详细信息，请查看 Windows 文档。&#xA;AMSI将根据监视和扫描的结果，根据响应代码确定其操作。以下是可能的响应代码列表，&#xA;AMSI_RESULT_CLEAN = 0 AMSI_RESULT_NOT_DETECTED = 1 AMSI_RESULT_BLOCKED_BY_ADMIN_START = 16384 AMSI_RESULT_BLOCKED_BY_ADMIN_END = 20479 AMSI_RESULT_DETECTED = 32768 这些响应代码将仅在 AMSI 的后端或通过第三方实现进行报告。如果 AMSI 检测到恶意结果，它将停止执行并发送以下错误消息。</description>
    </item>
  </channel>
</rss>
